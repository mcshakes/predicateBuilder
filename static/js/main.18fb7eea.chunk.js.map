{"version":3,"sources":["components/PredicateSelection.js","components/IntegerOperators.js","components/StringOperators.js","components/SearchValue.js","components/SessionTable.js","components/SingleQuery.js","components/QueryString.js","components/Builder.js","serviceWorker.js","index.js"],"names":["PredicateSelection","handleChange","e","target","selectedOptions","getAttribute","sendData","event","value","dataType","_this","props","buildColumn","react_default","a","createElement","className","onChange","this","data-type","React","Component","IntegerOperators","state","setState","sendOperator","operator","buildOperator","StringOperators","SearchValue","handleSubmit","searchValue","fromTheBottom","preventDefault","onSubmit","type","SessionTable","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onColumnChange","predicate","predicateBuilder","concat","toConsumableArray","onOperatorChange","submitSearchValue","sendQueryUp","sendUp","id","filters","renderOperaterSelect","showUserInput","isEmpty","length","isIntegerType","isStringType","components_IntegerOperators","components_StringOperators","components_SearchValue","components_PredicateSelection","SingleQuery","queryOperators","params","queryValues","queryInfo","queryList","queryReturned","Array","isArray","index","Builder","query","numTable","getBack","currentQuery","cutDown","array","splice","renderQueries","map","components_SingleQuery","key","_this2","tables","i","push","components_SessionTable","class","onClick","Boolean","window","location","hostname","match","ReactDOM","render","components_Builder","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVA2CeA,mNArCbC,aAAe,SAACC,GACCA,EAAEC,OAAOC,gBAAgB,GAAGC,aAAa,gBAG1DC,SAAW,SAACC,GACV,IAAIC,EAAQD,EAAMJ,OAAOK,MACrBC,EAAWF,EAAMJ,OAAOC,gBAAgB,GAAGC,aAAa,aAC5DK,EAAKC,MAAMC,YAAY,CAACJ,EAAOC,6EAI/B,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UACEE,SAAUC,KAAKjB,cAAgBiB,KAAKZ,SACpCU,UAAU,iBAERH,EAAAC,EAAAC,cAAA,UAAQP,MAAM,QAAd,cACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,KAAKW,YAAU,WAA7B,MACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,aAAaW,YAAU,UAArC,cACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,eAAeW,YAAU,WAAvC,gBACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,gBAAgBW,YAAU,WAAxC,iBACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,SAASW,YAAU,WAAjC,eACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,kBAAkBW,YAAU,UAA1C,cACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,iBAAiBW,YAAU,UAAzC,aACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,gBAAgBW,YAAU,WAAxC,2BACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,SAASW,YAAU,UAAjC,UACAN,EAAAC,EAAAC,cAAA,UAAQP,MAAM,OAAOW,YAAU,UAA/B,uBA9BmBC,IAAMC,YCsCxBC,6MArCbC,MAAQ,CACNf,MAAO,MAGTP,aAAe,SAACM,GACdG,EAAKc,SAAS,CACZhB,MAAOD,EAAMJ,OAAOK,OACnB,WACDE,EAAKe,aAAaf,EAAKa,MAAMf,YAIjCiB,aAAe,SAACC,GACdhB,EAAKC,MAAMgB,cAAcD,4EAIzB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UACEE,SAAUC,KAAKjB,aACfe,UAAU,wBAEVH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAQP,MAAM,UAAd,UACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,WAAd,WACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,gBAAd,gBACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,aAAd,aACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,WAAd,qBA/BmBY,IAAMC,WC0CtBO,6MAxCbL,MAAQ,CACNf,MAAO,MAGTP,aAAe,SAACM,GACdG,EAAKc,SAAS,CACZhB,MAAOD,EAAMJ,OAAOK,OACnB,WACDE,EAAKe,aAAaf,EAAKa,MAAMf,YAKjCiB,aAAe,SAACC,GACdhB,EAAKC,MAAMgB,cAAcD,4EAIzB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UACEE,SACEC,KAAKjB,aAEPe,UAAU,uBACVR,MAAOU,KAAKK,MAAMf,OAElBK,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAQP,MAAM,UAAd,UACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,YAAd,YACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,eAAd,eACAK,EAAAC,EAAAC,cAAA,UAAQP,MAAM,WAAd,qBAlCkBY,IAAMC,WC4BrBQ,oNA3BXN,MAAQ,CACNf,MAAO,MAIXP,aAAe,SAACM,GACdG,EAAKc,SAAS,CAAEhB,MAAOD,EAAMJ,OAAOK,WAGtCsB,aAAe,SAACvB,GACdG,EAAKC,MAAMoB,YAAYrB,EAAKa,MAAMf,OAClCE,EAAKC,MAAMqB,cAActB,EAAKa,MAAMf,OACpCD,EAAM0B,0FAIN,OACEpB,EAAAC,EAAAC,cAAA,QAAMmB,SAAUhB,KAAKY,aACnBd,UAAU,eAEVH,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAO3B,MAAOU,KAAKK,MAAMf,MAAOS,SAAUC,KAAKjB,eAC3DY,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,SAAS3B,MAAM,mBAtBTY,IAAMC,YCqEjBe,qBAhEb,SAAAA,EAAYzB,GAAO,IAAAD,EAAA,OAAA2B,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACjB1B,EAAA2B,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,KAAMP,KASR+B,eAAiB,SAACC,GAChBjC,EAAKc,SAAS,CACZoB,iBAAgB,GAAAC,OAAAR,OAAAS,EAAA,EAAAT,CAAM3B,EAAKa,MAAMqB,kBAAjB,CAAmCD,EAAU,KAC7DR,KAAMQ,EAAU,MAbDjC,EAiBnBqC,iBAAmB,SAACrB,GAClBhB,EAAKc,SAAS,CACZoB,iBAAgB,GAAAC,OAAAR,OAAAS,EAAA,EAAAT,CAAM3B,EAAKa,MAAMqB,kBAAjB,CAAmClB,OAnBpChB,EAuBnBsC,kBAAoB,SAACxC,GACnBE,EAAKc,SAAS,CACZoB,iBAAgB,GAAAC,OAAAR,OAAAS,EAAA,EAAAT,CAAM3B,EAAKa,MAAMqB,kBAAjB,CAAmCpC,OAzBpCE,EA6BnBuC,YAAc,SAACzC,GACbE,EAAKC,MAAMuC,OAAOxC,EAAKC,MAAMwC,GAA7B,GAAAN,OAAAR,OAAAS,EAAA,EAAAT,CAAqC3B,EAAKa,MAAMqB,kBAAhD,CAAkEpC,MA5BlEE,EAAKa,MAAQ,CACX6B,QAAS,GACTR,iBAAkB,GAClBT,KAAM,GACNT,SAAU,IANKhB,wEAmCjB,IAKI2C,EACAC,EANEC,EAAiD,IAAvCrC,KAAKK,MAAMqB,iBAAiBY,OACtCC,EAAoC,YAApBvC,KAAKK,MAAMY,KAC3BuB,EAAmC,WAApBxC,KAAKK,MAAMY,KACdjB,KAAKK,MAAMqB,iBAAiB,GAgB9C,OAXKW,GAAWE,IACdJ,EAAuBxC,EAAAC,EAAAC,cAAC4C,EAAD,CAAkBhC,cAAeT,KAAK6B,qBAE1DQ,GAAWG,IACdL,EAAuBxC,EAAAC,EAAAC,cAAC6C,EAAD,CAAiBjC,cAAeT,KAAK6B,oBAGzDQ,IACHD,EAAgBzC,EAAAC,EAAAC,cAAC8C,EAAD,CAAa9B,YAAab,KAAK8B,kBAAmBhB,cAAed,KAAK+B,eAItFpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAC+C,EAAD,CAAoBlD,YAAaM,KAAKwB,iBACrCW,EACAC,UA3DkBlC,IAAMC,YC+DlB0C,GCpEW3C,IAAMC,4BDG9B,SAAA0C,EAAYpD,GAAO,IAAAD,EAAA,OAAA2B,OAAAC,EAAA,EAAAD,CAAAnB,KAAA6C,IACjBrD,EAAA2B,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAA0B,GAAAtB,KAAAvB,KAAMP,KAQRqD,eAAiB,SAACC,GAChB,OAAOA,GACL,IAAK,SACH,MAAO,IACT,IAAK,WACH,MAAO,WACT,IAAK,UACH,MAAO,UACT,IAAK,cACH,MAAO,CAAC,OAAQ,KAClB,IAAK,eACH,MAAO,KACT,IAAK,YACH,MAAO,KACT,IAAK,UACH,MAAO,KACT,QACE,MAAO,KAvBXvD,EAAKa,MAAQ,CACX2C,YAAaxD,EAAKC,MAAMwD,UACxBC,UAAW,IALI1D,wEAiCeG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,OAAT,QAFlC,IAQIkB,EAFEH,EAAchD,KAAKP,MAAMuD,YACzBxC,EAAWR,KAAK8C,eAAeE,EAAY,IAWjD,OAPEG,EADEC,MAAMC,QAAQ7C,GACAb,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,aAAae,EAAY,GAAlC,KAAuCrD,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,QAAQzB,EAAS,IAAjE,MAA+EwC,EAAY,GAAIxC,EAAS,GAAxG,KACM,OAAbA,EACOb,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,aAAae,EAAY,GAAlC,IAAsCrD,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,MAAMzB,GAArD,KAAwEwC,EAAY,GAApF,KAEArD,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,aAAae,EAAY,GAAlC,IAAuCxC,EAAvC,IAAkDwC,EAAY,IAK5ErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEU,IAArBE,KAAKP,MAAM6D,MAAe3D,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,UAAT,UAA+BtC,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,UAAT,KACjEtC,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,QAAT,QAA2BtC,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,SAAT,WAA+BtC,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,SAAT,UAAyCtC,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,OAAT,OAGlGkB,UA3DejD,IAAMC,YEiEjBoD,oNA9DblD,MAAQ,CACNmD,MAAO,GACPC,SAAU,KAGZC,QAAU,SAACzB,EAAIuB,GACb,IAAIG,EAAenE,EAAKa,MAAMmD,MAC9BG,EAAa1B,GAAMuB,EACnBhE,EAAKc,SAAS,CACZkD,MAAOG,OAIXC,QAAU,SAACC,GAIT,OAHIA,EAAMvB,OAAS,GAClBuB,EAAMC,OAAO,EAAE,GAETD,KAITE,cAAgB,WACd,OAAQpE,EAAAC,EAAAC,cAAA,WAEJL,EAAKa,MAAMmD,MAAMQ,IAAI,SAACR,EAAOF,GAC3B,OAAO3D,EAAAC,EAAAC,cAACoE,EAAD,CAAaC,IAAKZ,EAAOA,MAAOA,EAAON,YAAaQ,gFASjE,IAHO,IAAAW,EAAAnE,KACHoE,EAAS,GAEJC,EAAE,EAAGA,EAAIrE,KAAKK,MAAMoD,SAAUY,IACrCD,EAAOE,KAAK3E,EAAAC,EAAAC,cAAC0E,EAAD,CAAcL,IAAKG,EAAGrC,OAAQhC,KAAK0D,QAASzB,GAAIoC,KAI9D,OACE1E,EAAAC,EAAAC,cAAA,OAAK2E,MAAM,iBACT7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZsE,GAIHzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UACE4E,QAAS,kBAAMN,EAAK7D,SAAS,CAACmD,SAAUU,EAAK9D,MAAMoD,SAAW,MADhE,QAMJ9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZE,KAAK+D,yBAvDM7D,IAAMC,YCMRuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPrF,EAAAC,EAAAC,cAACoF,EAAD,MACFC,SAASC,eAAe,SDwHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.18fb7eea.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/PredicateSelection.css\";\n\n\nclass PredicateSelection extends React.Component {\n\n  handleChange = (e) => {\n    let dataType = e.target.selectedOptions[0].getAttribute(\"data-type\");\n  }\n\n  sendData = (event) => {\n    let value = event.target.value;\n    let dataType = event.target.selectedOptions[0].getAttribute(\"data-type\");\n    this.props.buildColumn([value, dataType])\n  }\n\n  render() {\n    return (\n      <div className=\"column-select\">\n        <form>\n          <select\n            onChange={this.handleChange && this.sendData}\n            className=\"select-column\"\n            >\n              <option value=\"null\">Select One</option>\n              <option value=\"id\" data-type=\"integer\">ID</option>\n              <option value=\"user_email\" data-type=\"string\">User Email</option>\n              <option value=\"screen_width\" data-type=\"integer\">Screen Width</option>\n              <option value=\"screen_height\" data-type=\"integer\">Screen Height</option>\n              <option value=\"visits\" data-type=\"integer\"># of Visits</option>\n              <option value=\"user_first_name\" data-type=\"string\">First Name</option>\n              <option value=\"user_last_name\" data-type=\"string\">Last Name</option>\n              <option value=\"page_response\" data-type=\"integer\">Page Response Time (ms)</option>\n              <option value=\"domain\" data-type=\"string\">Domain</option>\n              <option value=\"path\" data-type=\"string\">Page Path</option>\n            </select>\n          </form>\n      </div>\n    )\n  }\n}\n\n\nexport default PredicateSelection\n","import React from \"react\";\nimport \"../css/PredicateSelection.css\";\n\nclass IntegerOperators extends React.Component {\n\n  state = {\n    value: \"\"\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value\n    }, () => {\n      this.sendOperator(this.state.value)\n    })\n  }\n\n  sendOperator = (operator) => {\n    this.props.buildOperator(operator)\n  }\n\n  render() {\n    return (\n      <div className=\"operator-form\">\n        <form>\n          <select\n            onChange={this.handleChange}\n            className=\"select-int-operators\"\n            >\n            <option>Select One</option>\n            <option value=\"equals\">equals</option>\n            <option value=\"between\">between</option>\n            <option value=\"greater than\">greater than</option>\n            <option value=\"less than\">less than</option>\n            <option value=\"in list\">in list</option>\n          </select>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default IntegerOperators;\n","import React from \"react\";\nimport \"../css/PredicateSelection.css\";\n\nclass StringOperators extends React.Component {\n\n  state = {\n    value: \"\"\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value\n    }, () => {\n      this.sendOperator(this.state.value);\n    })\n  }\n\n\n  sendOperator = (operator) => {\n    this.props.buildOperator(operator)\n  }\n\n  render() {\n    return (\n      <div className=\"operator-form\">\n        <form>\n          <select\n            onChange={\n              this.handleChange\n            }\n            className=\"select-str-operators\"\n            value={this.state.value}\n            >\n            <option>Select One</option>\n            <option value=\"equals\">equals</option>\n            <option value=\"contains\">contains</option>\n            <option value=\"starts with\">starts with</option>\n            <option value=\"in list\">in list</option>\n          </select>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default StringOperators;\n","import React from \"react\";\nimport \"../css/Search.css\";\n\nclass SearchValue extends React.Component {\n    state = {\n      value: \"\"\n    }\n\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    this.props.searchValue(this.state.value)\n    this.props.fromTheBottom(this.state.value)\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}\n        className=\"search-form\"\n        >\n        <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n        <input type=\"submit\" value=\"Search\"/>\n      </form>\n    )\n  }\n}\n\nexport default SearchValue;\n","import React from \"react\";\nimport PredicateSelection from \"./PredicateSelection\";\nimport IntegerOperators from \"./IntegerOperators\";\nimport StringOperators from \"./StringOperators\";\nimport SearchValue from \"./SearchValue\";\nimport \"../css/Session.css\";\n\nclass SessionTable extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      filters: [],\n      predicateBuilder: [],\n      type: \"\",\n      operator: \"\"\n    }\n  }\n\n  onColumnChange = (predicate) => {\n    this.setState({\n      predicateBuilder: [...this.state.predicateBuilder, predicate[0]],\n      type: predicate[1]\n    })\n  }\n\n  onOperatorChange = (operator) => {\n    this.setState({\n      predicateBuilder: [...this.state.predicateBuilder, operator]\n    })\n  }\n\n  submitSearchValue = (value) => {\n    this.setState({\n      predicateBuilder: [...this.state.predicateBuilder, value]\n    })\n  }\n\n  sendQueryUp = (value) => {\n    this.props.sendUp(this.props.id, [...this.state.predicateBuilder, value])\n  }\n\n\n  render() {\n    const isEmpty = this.state.predicateBuilder.length === 0;\n    const isIntegerType = this.state.type === \"integer\"\n    const isStringType = this.state.type === \"string\"\n    const isBetween = this.state.predicateBuilder[1];\n\n    let renderOperaterSelect;\n    let showUserInput;\n\n    if (!isEmpty && isIntegerType) {\n      renderOperaterSelect = <IntegerOperators buildOperator={this.onOperatorChange}/>\n    }\n    if (!isEmpty && isStringType) {\n      renderOperaterSelect = <StringOperators buildOperator={this.onOperatorChange}/>\n    }\n\n    if (!isEmpty) {\n      showUserInput = <SearchValue searchValue={this.submitSearchValue} fromTheBottom={this.sendQueryUp}/>\n    }\n\n    return (\n      <div className=\"predicate-start\">\n        <PredicateSelection buildColumn={this.onColumnChange}/>\n        {renderOperaterSelect}\n        {showUserInput}\n      </div>\n    )\n  }\n}\n\nexport default SessionTable\n","import React from \"react\";\nimport \"../css/Query.css\";\n\n\nclass SingleQuery extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      queryValues: this.props.queryInfo,\n      queryList: []\n    }\n  }\n\n  queryOperators = (params) => {\n    switch(params) {\n      case \"equals\":\n        return \"=\";\n      case \"contains\":\n        return \"Contains\"\n      case \"between\":\n        return \"BETWEEN\"\n      case \"starts with\":\n        return [\"LIKE\", \"%\"]\n      case \"greater than\":\n        return \">=\";\n      case \"less than\":\n        return \"<=\";\n      case \"in list\":\n        return \"IN\";\n      default:\n        return \"\";\n    }\n  }\n\n  render() {\n\n    const appendAdditionalLine = (\n                                    <div className=\"additional-query\">\n                                      <span id=\"and\">AND</span>\n                                    </div>\n                                  )\n\n    const queryValues = this.props.queryValues\n    const operator = this.queryOperators(queryValues[1])\n    let queryReturned;\n\n    if (Array.isArray(operator)) {\n      queryReturned = <span id=\"predicate\">{queryValues[0]}  <span id=\"like\">{operator[0]}</span>  '{queryValues[2]}{operator[1]}'</span>\n    } else if (operator === \"IN\") {\n      queryReturned = <span id=\"predicate\">{queryValues[0]} <span id=\"in\">{operator}</span> ({queryValues[2]})</span>\n    } else {\n      queryReturned = <span id=\"predicate\">{queryValues[0]} {operator} {queryValues[2]}</span>\n    }\n\n    return (\n\n        <div className=\"return-value\">\n          {\n            this.props.index === 0 ? (<span><span id=\"select\">SELECT</span><span id=\"select\">*</span>\n          <span id=\"from\">FROM</span><span id=\"table\">session</span><span id=\"where\">WHERE</span></span>) : (<span id=\"and\">AND</span>)\n          }\n\n          {queryReturned}\n        </div>\n\n    )\n  }\n}\n\nexport default SingleQuery;\n","import React from \"react\";\n\nclass QueryString extends React.Component {\n  render() {\n    return (\n      <div className=\"query-results\">\n        <h1>SAMPLE QUERY STRINGS GO HERE</h1>\n      </div>\n    )\n  }\n}\n\nexport default QueryString;\n","import React from \"react\";\nimport SessionTable from './SessionTable';\nimport QueryString from \"./QueryString\";\nimport SingleQuery from \"./SingleQuery\";\nimport \"../css/Builder.css\";\n\nclass Builder extends React.Component {\n  state = {\n    query: [],\n    numTable: 1\n  }\n\n  getBack = (id, query) => {\n    let currentQuery = this.state.query;\n    currentQuery[id] = query;\n    this.setState({\n      query: currentQuery\n    })\n  }\n\n  cutDown = (array) => {\n    if (array.length > 3) {\n     array.splice(1,1)\n    }\n    return array\n  }\n\n\n  renderQueries = () => {\n    return (<div>\n      {\n        this.state.query.map((query, index) => {\n          return <SingleQuery key={index} index={index} queryValues={query}/>\n        })\n      }\n    </div>)\n  }\n\n  render() {\n    let tables = [];\n\n    for (let i=0; i < this.state.numTable; i++) {\n      tables.push(<SessionTable key={i} sendUp={this.getBack} id={i}/>)\n    }\n\n\n    return (\n      <div class=\"query-builder\">\n        <div className=\"builder-base\">\n          {tables}\n        </div>\n\n\n        <div className=\"add-line\">\n            <button\n              onClick={() => this.setState({numTable: this.state.numTable + 1})}>\n              ADD\n            </button>\n        </div>\n\n        <div className=\"result\">\n          {this.renderQueries()}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default Builder;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Builder from './components/Builder';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Builder />,\ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}